{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# [ARE 212] Discussion Section - Python 02\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- [Ethan's materials](https://github.com/ligonteaching/ARE212_Materials)\n",
    "- [My github](https://github.com/bk-econ/share)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Source Material"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "These notes are the fruits of arduous labor of others.  My contributions are minimual, but please expect to find some code (and even explanation) errors (and assume them all to be mine). If you find any mistakes or have questions, please [let me know](mailto:benjaminkrause@berkeley.edu).\n",
    "    \n",
    "The primary sources of these notes are:\n",
    "- Ethan and in particular his EEP 153 Notes\n",
    "- [Computational and Inferential Thinking: The Foundations of Data Science](https://www.inferentialthinking.com/chapters/intro.html) which is the textbook for UC Berkeley's [Data 8: The Foundations of Data Science](http://data8.org/) course.  All of the notes, readings, labs, and assignments are fully available online as well.  For instance, here is [Spring 2020](http://data8.org/sp20/).\n",
    "- [Python Data Science Handbook](https://jakevdp.github.io/PythonDataScienceHandbook/)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Follow-up from questions posed last week"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Discussions: See [Ethan's full response](https://bcourses.berkeley.edu/courses/1487913/discussion_topics/5737368)\n",
    "    - *When is discussion participation \"due\"?*  \n",
    "        - Initial response by Wednesday\n",
    "        - Further contributiioins can be later ni the week (including over the weekend)\n",
    "- Final format: See [Ethan's full response](https://bcourses.berkeley.edu/courses/1487913/discussion_topics/5737448) \n",
    "    - *Do we need to be able to code in Python?* \n",
    "        - \"My intention, rather, is to provide you with some simple working notebooks you can play with, and follow along with to achieve instructional ends which aren't principally focused on on new language acquisition\"\n",
    "        - \"I'll make sure the final doesn't require python mastery.\"\n",
    "    - *What should we expect in the final?* \n",
    "        - \"My intention is for the topics raised in the discussions to serve as likely jumping off points for the final. \n",
    "        - \". . . students are responsible for the content of the lecture, and should be familiar with the specific readings I reference (not necessarily all the papers mentioned in the syllabus).\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Introduction to `Python`"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Learning Goals Today"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1.  Review [classical_regression](https://datahub.berkeley.edu/user/benjaminkrause/notebooks/ARE212_Materials/classical_regression.ipynb)\n",
    "2.  Review [weighted_regression](https://datahub.berkeley.edu/user/benjaminkrause/notebooks/ARE212_Materials/weighted_regression.ipynb) \n",
    "3.  Review [random_variables0](https://datahub.berkeley.edu/user/benjaminkrause/notebooks/ARE212_Materials/random_variables0.ipynb)\n",
    "  \n",
    "\n",
    "NB: If needed, review the introduction from last week at [ARE 212 Discussion Section - Python 01](https://datahub.berkeley.edu/user/benjaminkrause/notebooks/ARE212_Discussion_Section/%5BARE%20212%5D%20Discussion%20Section%20-%20Python%2001.ipynb) or from [my github](https://github.com/bk-econ/share)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Open a `jupyter` notebook on `datahub.berkeley.edu`"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1. Open the website [URL to Interact](https://url-to-interact.herokuapp.com/)\n",
    "2. For `1. Choose your desired hub:` select `datahub.berkeley.edu`\n",
    "3. Either navigate to [my github](https://github.com/bk-econ/share) page and select the `URL` of the correct section or simply copy it from right here: https://github.com/bk-econ/share/blob/master/%5BARE%20212%5D%20Discussion%20Section%20-%20Python%2001.ipynb\n",
    "4. Paste the `URL` you copied in the previous step into `2. Paste the GitHub URL for your file or folder in the box below.`\n",
    "5. Click `Convert to interact link!`\n",
    "6. Copy the new `URL` generated in field `4. Your interact link URL will appear in the box below.`\n",
    "7. Paste the new `URL` in any web browser and get to it!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1. [classical_regression](https://datahub.berkeley.edu/user/benjaminkrause/notebooks/ARE212_Materials/classical_regression.ipynb)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "or see [classical regression on github](https://github.com/ligonteaching/ARE212_Materials/blob/master/classical_regression.ipynb)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Classical regression in =python=\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The fact that $X$ and $u$ are &ldquo;independent&rdquo; variables means that\n",
    "if we want to compute a &ldquo;classical&rdquo; regression we&rsquo;d do it\n",
    "something like this:\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Define independent random variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 1.1. ORIGINAL CODE\n",
    "%matplotlib inline\n",
    "import numpy as np\n",
    "from scipy.stats import multivariate_normal\n",
    "\n",
    "k = 2 # Number of observables\n",
    "\n",
    "mu = [0]*k\n",
    "Sigma=[[1,0.5],\n",
    "       [0.5,2]]\n",
    "\n",
    "X = multivariate_normal(mu,Sigma)\n",
    "\n",
    "u = multivariate_normal(cov=0.2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<font color='red'> *notes*: </font>\n",
    "- `%matplotlib inline`\n",
    "    - `%` is used to call [magic functions](https://ipython.readthedocs.io/en/stable/interactive/tutorial.html#magics-explained) in `Python`.\n",
    "    - [`matplotlib`](https://matplotlib.org/) - \"comprehensive library for creating static, animated, and interactive visualizations in Python\"\n",
    "        - Here is a more comprehensive treatment of [Using matplotlib in jupyter notebooks](https://medium.com/@1522933668924/using-matplotlib-in-jupyter-notebooks-comparing-methods-and-some-tips-python-c38e85b40ba1)\n",
    "        - Originally designed to enable MATLAB-style plotting via gnuplot from the [IPython](https://plotly.com/python/ipython-vs-python/) command line\n",
    "        - Noteable because it plays well with many operating systems and graphics packages\n",
    "    - `inline` simply means that any plots we create are going to appear in our notebook inline \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Available matplotlib backends: ['tk', 'gtk', 'gtk3', 'wx', 'qt4', 'qt5', 'qt', 'osx', 'nbagg', 'notebook', 'agg', 'svg', 'pdf', 'ps', 'inline', 'ipympl', 'widget']\n"
     ]
    }
   ],
   "source": [
    "# check the available backends for matplotlib with --list\n",
    "%matplotlib --list"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<font color='red'> *notes*: </font>\n",
    "- `import numpy as np` \n",
    "    - [numpy](https://numpy.org/): mathematical functions, generally used to create arrays\n",
    "- `from scipy.stats import multivariate_normal`\n",
    "    - `import X` vs `from X import x` (Explanation from this [Stack Exchange](https://stackoverflow.com/questions/9439480/from-import-vs-import))\n",
    "        - `import X`: \"Imports the module X, and creates a reference to that module in the current namespace. Then you need to define completed module path to access a particular attribute or method from inside the module (e.g.: X.name or X.attribute)\"\n",
    "        - `from X import x`: \"Imports the module X, and creates references to all public objects defined by that module in the current namespace . . . after you've run this statement, you can simply use a plain (unqualified) name to refer to things defined in module X.\" \n",
    "            - \"But X itself is not defined, so X.name doesn't work.\"\n",
    "            - \"And if name was already defined, it is replaced by the new version.\" \n",
    "            - \"And if name in X is changed to point to some other object, your module wonâ€™t notice.\"\n",
    "    - `scipy.stats`\n",
    "        - [scipy](https://www.scipy.org/): scientific functions\n",
    "        - `scipy.stats` is the set of statistical functions within `scipy`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "import scipy\n",
    "# scipy?\n",
    "#  A scientific computing package for Python . . . \n",
    "## imports all the functions from the NumPy namespace, and in addition provides:\n",
    "## Subpackages: Using any of these subpackages requires an explicit import.  \n",
    "## For example,``import scipy.cluster``."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# scipy.stats?\n",
    "# This module contains a large number of probability distributions \n",
    "## as well as a growing library of statistical functions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# scipy.stats.multivariate_normal?\n",
    "# A multivariate normal random variable.\n",
    "### multivariate_normal(mean=None,\n",
    "                    ### cov=1,\n",
    "                    ### allow_singular=False,\n",
    "                    ### seed=None,\n",
    "                    ### )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "k = 2\n",
      "mu = [0, 0]\n",
      "Sigma = [[1, 0.5], [0.5, 2]]\n",
      "X = <scipy.stats._multivariate.multivariate_normal_frozen object at 0x7f7126071e48>\n",
      "u = <scipy.stats._multivariate.multivariate_normal_frozen object at 0x7f71447f94a8>\n"
     ]
    }
   ],
   "source": [
    "# 1.1. CODE ABOVE WITH COMMENTS AND PRINTING\n",
    "\n",
    "# run magic function matplotlib to have visualizations inline in your notebook\n",
    "%matplotlib inline \n",
    "# see notes below\n",
    "\n",
    "# import the NumPy module and call it \"np\"\n",
    "import numpy as np # see notes below\n",
    "\n",
    "# import just the multivariate_normal function from the \"stats\" functions of the SciPy module\n",
    "from scipy.stats import multivariate_normal # see notes below \n",
    "\n",
    "# k gets 2\n",
    "k = 2 # Number of observables; R::k <- 2\n",
    "print(\"k =\", k)\n",
    "\n",
    "# mu gets the 1x2 zero vector\n",
    "mu = [0]*k\n",
    "print(\"mu =\", mu)\n",
    "\n",
    "# sigma gets the following matrix (note the use double brackets)\n",
    "Sigma=[[1,0.5],\n",
    "       [0.5,2]] # R::matrix(c(1, .5, .5, 2), nrow=2, byrow=TRUE)\n",
    "print(\"Sigma =\", Sigma)\n",
    "\n",
    "# X gets a multivariate normal random variable with mean = mu and cov = Sigma \n",
    "X = multivariate_normal(mu,Sigma) \n",
    "print(\"X =\", X)\n",
    "\n",
    "# u gets a multivariate normal random variable with mean = 0 and cov = .2 \n",
    "u = multivariate_normal(cov=0.2) # \n",
    "print(\"u =\", u)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Construct Sample\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To construct a sample of observables $(y,X)$ we just use the regression equation,\n",
    "     plus an assumption about the value of $\\beta$:\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 1.2. ORIGINAL CODE\n",
    "\n",
    "beta = [1/2,1]\n",
    "\n",
    "N=1000 # Sample size\n",
    "\n",
    "# Now: Transform r.v. X into a sample\n",
    "X = X.rvs(N)\n",
    "\n",
    "y = X@beta + u.rvs(N) # Note use of @ operator for matrix multiplication"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<font color='red'> *notes*: </font>\n",
    "- `X.rvs(size = n)` yields a random sample of size n from the object X \n",
    "- `@` represents matrix multiplication (as already stated above); R::%*%"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "beta = [0.5, 1]\n",
      "N = 1000\n"
     ]
    },
    {
     "ename": "AttributeError",
     "evalue": "'numpy.ndarray' object has no attribute 'rvs'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-9-eb51cbd6b45a>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0;31m# Now: Transform random variable X into a sample of N draws\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 12\u001b[0;31m \u001b[0mX\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrvs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mN\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     13\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"X =\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mAttributeError\u001b[0m: 'numpy.ndarray' object has no attribute 'rvs'"
     ]
    }
   ],
   "source": [
    "# 1.2. CODE ABOVE WITH COMMENTS AND PRINTING\n",
    "\n",
    "# beta gets a list of 1/2 and 1\n",
    "beta = [1/2,1] # R::list(1/2, 1)\n",
    "print(\"beta =\", beta)\n",
    "\n",
    "# N gets 1000\n",
    "N=1000 # Sample size\n",
    "print(\"N =\", N)\n",
    "\n",
    "# Now: Transform random variable X into a sample of N draws\n",
    "X = X.rvs(N)\n",
    "print(\"X =\", X)\n",
    "\n",
    "# y gets (R::X %*% beta + U)  where U is a sample of N draws from u\n",
    "y = X@beta + u.rvs(N) # Note use of @ operator for matrix multiplication\n",
    "print(\"y =\", y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<font color='red'>NB: Once you redefine your random variables using X.rvs(N), you must rerun the earlier code to run this cell again. </font> "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Turn to estimation\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "So, we now have data on *realizations* $(y,X)$ which take the\n",
    "     Now forget that we know $\\beta$ and let&rsquo;s estimate it, using\n",
    "     OLS.  As a numerical matter it&rsquo;s better to avoid explicitly\n",
    "     inverting the $(X^T X)$ matrix; instead we can solve the &ldquo;normal&rdquo;\n",
    "     equations.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Numerical solution\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.54382267 0.99563508]\n",
      "\n",
      "[[ 0.01469681 -0.00224287]\n",
      " [-0.00224287  0.01048138]]\n"
     ]
    }
   ],
   "source": [
    "# 1.3. ORIGINAL CODE\n",
    "\n",
    "from scipy.linalg import inv, sqrtm\n",
    "\n",
    "b = np.linalg.solve(X.T@X,X.T@y)\n",
    "\n",
    "e = y - X@b\n",
    "\n",
    "vb = e.var()*inv(X.T@X)\n",
    "\n",
    "print(b,end='\\n\\n')\n",
    "print(sqrtm(vb))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<font color='red'> *notes*: </font>\n",
    "- `X.T` produces the transpose of X; R::t(X)\n",
    "- `np.linalg.solve(a, b)` \"Solve a linear matrix equation, or system of linear scalar equations.  Computes the \"exact\" solution, `x`, of the well-determined, i.e., full rank, linear matrix equation `ax = b`.\"\n",
    "- `print(x, end = '\\n\\n')` by default `end = '\\n'` in the `print()` function, which starts a new line.  However, when `'\\n\\n'` is instead entered, your notebook will also skip a line between the printed information and the next output.  To avoid a new line being started, you can instead enter `' '`. \n",
    "- `inv( )` is a function that calculates the inverse of a matrix\n",
    "- `sqrtm( )` is the matrix square root function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "b = [0.54382267 0.99563508]\n",
      "e = [ 2.63877568e-01 -4.05948961e-02 -3.06400265e-01  4.01680446e-01\n",
      "  1.32770511e-01 -4.91137434e-01 -6.43808036e-01 -3.35490947e-01\n",
      " -4.38356243e-02  7.25539821e-01  8.12474308e-01  3.83179854e-01\n",
      "  2.25032587e-01 -1.26480234e-01  4.25695337e-01  2.63712309e-01\n",
      "  3.45894159e-01 -5.14810790e-02 -8.08247922e-01  1.54172789e-01\n",
      " -6.52153653e-01  6.55711474e-01  1.29100456e+00 -2.61035673e-01\n",
      " -6.66830892e-01  3.98032579e-01  5.82063626e-01 -9.20252685e-02\n",
      " -2.56009817e-01  1.05596879e-01  2.70580565e-01  2.06066938e-01\n",
      " -8.02597895e-01 -5.74631278e-02  4.76205281e-01 -2.60124223e-03\n",
      "  4.09489955e-01 -2.64064129e-02  1.43363529e-01 -2.24597394e-01\n",
      "  1.36951455e-01  1.17553824e-04  4.87108681e-01  9.39790221e-02\n",
      " -3.04193558e-01 -4.76847915e-01 -3.15018925e-01 -3.41043320e-01\n",
      "  2.25761356e-02 -1.25327862e-01  1.70522404e-01 -3.46605233e-02\n",
      " -1.73270663e-01 -3.79867121e-01  1.00433291e+00 -2.19827376e-01\n",
      "  1.70366034e-01  1.23304479e-01  4.50127754e-01  2.10111493e-01\n",
      "  2.66430510e-02  1.27821991e-01  4.22613478e-01 -9.27713549e-02\n",
      " -1.72474907e-01 -4.05545111e-01  2.34916949e-01 -1.98781351e-01\n",
      "  6.55753335e-02 -5.86366602e-01 -9.72017587e-01  1.19117952e-01\n",
      " -1.19907635e-01  4.24340928e-01 -1.13763317e-01 -2.32589384e-01\n",
      "  5.72716999e-01 -1.28240074e-01 -6.69552563e-02 -4.44120017e-01\n",
      " -4.78815357e-01  3.33132573e-02 -1.78811760e-01 -2.87303904e-02\n",
      " -1.02555844e-02  2.45371390e-01 -9.76682574e-01 -1.44572171e-01\n",
      "  7.06089721e-01  6.86646181e-02 -7.78989925e-02  1.09033172e-01\n",
      "  1.86996989e-01 -3.44752411e-01 -8.04921346e-02  1.97666585e-01\n",
      " -7.74684879e-01 -5.54977454e-01 -2.65531996e-02 -2.51218741e-01\n",
      " -3.94259884e-02 -4.22922764e-01 -2.57757395e-01 -9.22054503e-02\n",
      " -2.28667699e-01 -9.08896883e-01 -4.90238650e-01 -9.31857940e-02\n",
      "  1.65744043e-01  4.30140509e-01 -1.78973404e-01  1.66161152e-01\n",
      " -1.08156121e-01 -9.91300613e-02  2.17982403e-01 -3.51539245e-01\n",
      " -1.89785684e-01  1.04278876e+00 -3.04252427e-01 -4.56261392e-01\n",
      "  2.39838632e-01 -8.85005680e-01 -1.65961078e-01 -3.68271229e-01\n",
      "  1.82724033e-01  8.46092801e-01  1.94256962e-01 -7.46985426e-01\n",
      "  4.55527820e-03 -4.31912179e-02  5.33204359e-01 -1.51512649e-01\n",
      " -1.82257608e-01 -7.00661888e-03  1.32656414e-01 -4.71202591e-01\n",
      " -7.46198167e-01 -4.55493085e-02 -4.31832064e-01  2.96884660e-01\n",
      " -3.42442432e-01 -3.75943564e-01  7.43496774e-01 -2.95100623e-03\n",
      "  6.95697747e-01  1.03204197e-01  1.45695893e-01 -1.62550977e-02\n",
      "  2.84926571e-02  2.88370493e-01  3.90802840e-01  8.08272110e-01\n",
      "  3.23074405e-01  2.70858373e-01 -3.06631805e-02  4.53121898e-01\n",
      "  1.00576573e+00  2.66310877e-02  3.39597007e-01  9.07505798e-04\n",
      "  3.31636210e-01 -1.15504729e-01  7.77107939e-01  5.72437315e-01\n",
      " -1.67228105e-01  4.39012025e-01 -8.72886847e-02 -1.51944275e-01\n",
      " -3.99927386e-01  5.41186836e-01 -1.51517831e-01 -1.96119765e-01\n",
      " -7.40280065e-02  1.18646272e+00 -1.74010709e-01  6.49296925e-01\n",
      " -2.94631182e-01 -9.20458066e-02 -1.66675998e-01  6.67325027e-02\n",
      "  4.70488918e-01 -8.07110162e-02  7.79354405e-02  1.29269289e-01\n",
      "  2.99228943e-01  3.97911923e-01 -3.72696030e-01  2.96984873e-01\n",
      "  7.76319136e-01 -3.72280118e-01 -3.89649558e-01 -2.10018373e-02\n",
      " -8.15702776e-02  1.28469046e+00  5.85078361e-03 -6.88925463e-02\n",
      "  3.57402229e-01 -8.51969038e-01 -4.04606292e-01 -6.01638502e-01\n",
      " -2.28475518e-01 -1.27361662e-01  7.89749570e-01  1.16387719e-01\n",
      "  6.49948844e-02 -4.45451345e-01  3.05541742e-01  5.32385259e-01\n",
      "  3.40364302e-01  3.66757042e-01  1.35097168e-01 -2.96340048e-01\n",
      "  9.05146884e-01 -1.79471470e-01  8.95699726e-01 -6.67609652e-02\n",
      "  2.11982521e-01 -5.28056386e-03  7.40656805e-02 -5.98822059e-01\n",
      "  5.37766325e-02 -2.29255203e-01  8.32870992e-01 -2.03354233e-01\n",
      "  1.67250124e-01 -2.55504713e-01 -2.38160744e-01  4.75876655e-01\n",
      " -4.05150853e-01  4.06316512e-01  7.46971102e-01  2.53537877e-01\n",
      " -1.34274708e-01  3.47676909e-01 -2.59678622e-01  3.52874244e-01\n",
      " -6.02037625e-01  2.17891297e-01 -2.29784370e-01  2.83988829e-01\n",
      "  1.52376160e-02 -4.79281779e-01  7.18912172e-02  4.77150954e-01\n",
      "  1.41344921e-01  3.16865985e-01  8.95965838e-01  5.33562565e-01\n",
      "  4.55485001e-01  3.56934258e-01  1.26431022e-01  3.27373978e-01\n",
      " -4.41788735e-01 -7.34061455e-01  6.92023719e-01  7.17840282e-02\n",
      " -2.76670975e-01  5.66586012e-01 -4.23789241e-01  8.23551615e-01\n",
      " -1.72983914e-01  1.57242371e-01  4.82079125e-01 -1.97095277e-01\n",
      " -5.35010092e-01 -5.08079517e-02  2.25927939e-01  2.43222042e-01\n",
      "  4.49542964e-01 -2.71460486e-01  3.25139814e-01 -3.07966446e-01\n",
      "  3.99709830e-02  1.22019371e-01  8.29039892e-02 -5.48007028e-01\n",
      "  6.73955152e-02 -1.40149092e-01  5.95001249e-01 -2.66207668e-01\n",
      " -5.31370666e-01  1.16268038e-01 -2.48030420e-01 -5.67867803e-01\n",
      "  6.08700169e-02 -7.23434645e-01  2.22733021e-01 -6.26456048e-01\n",
      " -1.44658762e-01  5.54840113e-01  4.52856250e-01  1.61871554e-01\n",
      " -1.56471402e-01  5.44629139e-01 -2.88045816e-01 -2.04388207e-01\n",
      "  8.70316486e-03 -3.40615023e-01 -9.92715504e-02 -4.57816246e-01\n",
      " -1.60196644e-01  3.75549029e-01 -1.53314777e-01 -6.89419420e-01\n",
      "  4.59223484e-01 -5.48720677e-01 -8.17532403e-01  1.05212030e-01\n",
      " -7.99130819e-01 -1.25423777e-01  1.19499762e+00  2.54800500e-01\n",
      " -2.23812217e-01 -8.30787811e-01 -5.47170077e-02 -6.04464109e-01\n",
      " -2.16128442e-01  3.01196436e-01  2.92753181e-01 -3.34553355e-01\n",
      " -1.15581887e-02  3.36014702e-01 -9.28278947e-02  1.22383188e-01\n",
      "  4.23953870e-01 -8.90009517e-02 -2.05954889e-01 -8.21029529e-01\n",
      "  8.48646123e-01 -3.47546046e-01 -7.46837911e-01 -4.08917719e-01\n",
      " -6.92065983e-01  2.88890783e-01 -8.51164783e-01 -4.77213788e-01\n",
      " -5.19248536e-01 -4.53262707e-01 -1.65780287e-01  7.08587850e-01\n",
      "  8.96951843e-02 -3.12579887e-02 -8.01425747e-01  7.31305121e-01\n",
      "  5.51550677e-01 -1.80798910e-01  6.20757466e-01 -5.26420353e-01\n",
      " -4.29287077e-01  5.54782433e-01  6.47418181e-01 -9.29126496e-01\n",
      "  4.24504028e-01  1.65503369e-02 -5.65660466e-01 -4.48750113e-01\n",
      " -1.42606894e-01 -3.58370739e-01 -5.49768014e-01  2.26715665e-01\n",
      "  7.59567279e-01 -1.70390385e-01 -1.29147338e-01  5.18420667e-01\n",
      "  7.26289874e-02 -1.24110182e-01  1.67595367e-01 -2.27579958e-01\n",
      " -1.29237707e-01  5.04398210e-01  5.63896973e-01  3.75649626e-01\n",
      "  2.41262429e-01  4.35319598e-01  7.81600400e-01 -1.90788864e-01\n",
      "  7.04286722e-01 -2.57834723e-01  1.66002172e-02  4.99771199e-01\n",
      " -6.98076615e-02  1.99368404e-02  1.69557759e-02  6.72450372e-01\n",
      " -2.61657103e-01 -2.48276488e-01 -2.54648130e-01  2.66933237e-01\n",
      " -1.11269025e-01 -3.04349994e-01 -1.86486737e-01  1.04088083e-01\n",
      " -2.04991710e-01 -1.42062548e-01  4.09745553e-01  7.18902173e-01\n",
      " -4.17237082e-01 -4.66106213e-01 -6.05041031e-01  1.64477269e-01\n",
      " -9.98371489e-02 -7.57197577e-01 -4.11716842e-01  2.56659569e-01\n",
      " -2.85581727e-02 -4.08223158e-01  9.74102364e-02  5.77573246e-02\n",
      " -1.31596888e+00  5.46928560e-01 -9.35323971e-02  2.05374086e-01\n",
      " -4.37611102e-02 -7.70637753e-02 -5.03931351e-01  6.40366578e-01\n",
      "  1.15417791e-01  3.13548164e-01 -3.39258281e-02  1.04231413e-01\n",
      "  1.08770838e-01  3.59229554e-01 -9.22998517e-01 -2.86048562e-01\n",
      "  9.38375787e-01  1.78813781e-01  1.18366524e-01 -6.14083065e-01\n",
      " -8.29878175e-01  4.19755810e-01 -1.21809581e+00  6.41759979e-01\n",
      " -9.65455514e-02  3.64455811e-01 -1.02804621e+00 -3.53208640e-02\n",
      " -1.03144707e+00  9.32580357e-01  8.23175859e-01  9.60187628e-01\n",
      " -2.16701232e-01  1.26213434e-01  4.95934365e-01 -1.27071310e-01\n",
      " -5.04781494e-01  3.49727187e-01 -6.29277147e-01  7.99042616e-02\n",
      "  5.85150614e-01  2.83053716e-01  3.33636807e-01 -2.31929197e-01\n",
      "  1.79124852e-01  6.55336859e-01 -1.07746340e-01  9.12889253e-02\n",
      "  4.85613160e-02  5.65558603e-01 -1.32538441e-01 -4.07309306e-01\n",
      " -7.39164225e-01 -1.44958260e-01  5.14331740e-01 -4.19178789e-01\n",
      " -6.17395206e-01  1.92174074e-01  1.43629079e-01  2.35306438e-01\n",
      " -1.19681252e-01 -1.27121678e-01 -5.24828011e-01  7.60670972e-02\n",
      "  4.77107528e-01 -8.04589467e-02 -3.14832881e-02  3.06522625e-01\n",
      "  3.47568260e-02  5.12749489e-02 -4.07137523e-01 -3.87385384e-01\n",
      " -1.46852578e+00 -6.58151176e-01  2.48718070e-01 -1.94882282e-01\n",
      "  2.64563168e-01  2.26893337e-02 -1.36494071e-02  6.70483809e-01\n",
      " -3.69417330e-01 -3.49950819e-01 -4.92873149e-01 -7.15787022e-01\n",
      " -3.17314753e-01  5.79370207e-01  4.10791235e-01 -2.22901891e-01\n",
      " -9.39052311e-02 -3.23345754e-01 -8.98380451e-01 -8.11961070e-01\n",
      " -7.65390043e-02 -4.18046381e-01 -1.14842232e-01  7.53970653e-01\n",
      "  1.48573694e-01 -1.61635122e-01  1.20741170e+00 -4.84098967e-01\n",
      " -7.21156498e-01 -4.23841558e-01  5.12569105e-01  4.52451103e-02\n",
      " -5.11933603e-01  7.15931619e-02  4.94201382e-02 -4.46899367e-01\n",
      "  4.90353413e-01 -7.09226797e-01 -3.84952120e-01  1.23118965e+00\n",
      "  3.36611615e-01  5.67357713e-01 -4.95878571e-05  1.58354035e-01\n",
      " -2.95291591e-01 -1.14594640e-01 -3.04209433e-01  4.69896295e-01\n",
      "  3.31545789e-01 -8.76424349e-01 -4.82473406e-01 -8.18235309e-01\n",
      "  4.32477410e-01 -3.63102457e-01  4.66329519e-01 -4.53863576e-01\n",
      " -2.93951723e-01 -6.66000909e-01 -4.87558124e-01 -4.41846995e-01\n",
      "  4.96821030e-01 -3.10662542e-02  2.13451011e-01  9.05079329e-02\n",
      "  1.29044298e+00 -2.97525029e-01 -2.25945685e-01 -3.36254071e-01\n",
      " -3.66180622e-01  4.99177793e-01 -3.22461898e-01 -4.66937016e-01\n",
      " -4.89694131e-01 -1.97023363e-01  9.08692937e-02  1.29666527e-01\n",
      " -2.83889726e-01  8.46348981e-01 -5.68197516e-03 -1.12335395e+00\n",
      " -4.58935087e-03  9.67042913e-01 -4.30536409e-02  5.34533339e-01\n",
      "  1.78918418e-01  3.08098665e-02 -9.29172959e-02  2.92325011e-01\n",
      " -1.62568998e-01  8.80541608e-01 -4.48681862e-01 -5.75439689e-01\n",
      " -7.22994053e-01  3.02101886e-01  5.53241847e-01 -2.42860868e-01\n",
      " -2.13638830e-01  1.16191108e-01 -4.98910318e-01 -1.12985940e-01\n",
      " -6.31196740e-01 -9.13022973e-02  1.59965714e-01 -1.40762096e-01\n",
      "  5.78395894e-01  3.36282651e-01  5.06198653e-02  2.58769945e-01\n",
      " -2.26502261e-01  4.36728870e-01  3.03810487e-01  2.84214687e-01\n",
      " -9.41278124e-01 -5.05889515e-01  8.88895043e-01  1.91829105e-01\n",
      " -3.20548870e-01 -4.85140199e-01  1.78983068e-01  5.61696007e-01\n",
      "  3.99585007e-01  6.91680815e-01 -5.03002401e-01  1.18248748e-03\n",
      " -8.68985637e-03 -4.60605216e-01 -1.91084821e-01 -5.47101368e-01\n",
      " -1.56857025e-01 -3.08400290e-01  1.28314505e-01 -1.81846508e-01\n",
      "  1.32242612e-01  3.76062467e-01  8.39747879e-02  1.16342757e+00\n",
      "  8.58758319e-02 -5.17395732e-01  2.64374124e-01  1.38705450e-01\n",
      "  4.11598465e-01  1.17992855e-01 -2.14628480e-01 -6.32495887e-02\n",
      "  1.80189236e-01 -2.70389180e-01 -4.56622897e-01 -5.13061200e-01\n",
      " -2.21554394e-01 -2.73122592e-01 -4.23982815e-01 -8.08261569e-02\n",
      " -8.68289499e-02  4.06223279e-01 -2.21297854e-01 -1.52100208e-01\n",
      "  5.91684806e-01 -1.07426111e+00 -1.03952264e+00  1.06922884e-01\n",
      " -4.81476511e-01  3.81098294e-01 -7.10130707e-01  6.05865431e-01\n",
      "  2.04383135e-01  2.44198108e-01 -3.92704853e-02 -1.31952713e-01\n",
      " -1.86963104e-01 -1.88055223e-01 -2.20793737e-01 -1.92903922e-01\n",
      "  6.54025736e-01 -5.41557143e-01 -1.85344038e-01  3.63267418e-01\n",
      "  1.00763268e+00 -3.36192703e-01 -2.77419354e-01  3.18013217e-01\n",
      " -2.68699060e-01  2.26648835e-01  4.26840600e-01 -7.10919304e-01\n",
      "  7.79262335e-01 -1.80936772e-01  8.52031116e-02  5.52879730e-01\n",
      " -1.22891162e-01 -4.96696627e-01  8.69903786e-01 -1.35449076e-01\n",
      "  7.10146469e-01  2.80935304e-01  5.08636577e-02 -2.76480333e-01\n",
      "  9.01454208e-01 -7.60839432e-01  6.54694626e-02  1.02519842e-01\n",
      "  5.87732932e-01  1.45446234e-01 -7.98058744e-01 -8.28560616e-02\n",
      " -9.03052020e-02  1.96828910e-01 -9.98858424e-02  9.87128911e-01\n",
      "  1.01932497e+00 -1.97028545e-01  5.22520790e-01 -9.76295928e-02\n",
      "  8.42951239e-03  1.54506985e-01  9.39765732e-01  7.09895246e-01\n",
      " -7.20021562e-02  6.85995191e-01 -2.79425071e-01 -1.04200619e+00\n",
      "  3.94423115e-01 -2.77642111e-01 -3.73887814e-01 -2.00338499e-01\n",
      "  1.89229528e-01  3.86589855e-01  2.94999102e-01 -6.23616263e-01\n",
      " -2.00015258e-01  4.10311569e-01 -6.31068902e-01 -2.64131095e-02\n",
      "  1.54114951e-01 -1.35020338e-01  1.06644896e-02  2.54419244e-01\n",
      "  1.02614337e-01 -1.77283122e-01  3.61994902e-01  1.18849741e-01\n",
      "  6.05408391e-01 -2.27066271e-01  7.26812174e-03  8.94169469e-01\n",
      " -7.40066726e-01  1.95494267e-01  1.63821605e-01  4.85091139e-01\n",
      "  1.53605552e-01  1.69554036e-03 -7.14041453e-02 -3.12239607e-01\n",
      "  2.56626511e-01 -4.30274427e-01 -1.98261136e-01 -3.96190190e-01\n",
      "  2.27956251e-01 -6.01665401e-01  1.33824155e-01  4.60709800e-01\n",
      "  2.34052781e-01 -5.40829753e-01  3.00862675e-02 -9.21616656e-02\n",
      " -9.13855428e-03  5.24536285e-01 -1.79873844e-01 -4.56126637e-02\n",
      " -5.02222266e-01  1.89865223e-01 -2.64438927e-01 -1.17349023e-02\n",
      " -3.79106235e-01  2.27509213e-01 -1.45048298e-02  6.84377322e-01\n",
      "  1.10483265e-01  4.54681543e-03 -1.49566952e-01  6.96938927e-01\n",
      "  2.01170527e-02  1.08359819e+00  1.03849625e-01 -2.39635686e-01\n",
      " -5.55481530e-01  8.86897468e-01 -5.37124074e-01  3.88105920e-01\n",
      "  2.52045276e-01 -2.95252410e-01  7.21688849e-01  7.28888715e-01\n",
      " -5.04646175e-01 -5.84103715e-01 -3.47669415e-01 -2.21376542e-01\n",
      "  4.69886340e-01 -1.63519362e-01 -4.98273682e-01  2.60713978e-01\n",
      " -4.19159054e-01  4.49733200e-01  7.90860439e-02 -1.93001485e-01\n",
      " -9.95299538e-02  4.37180863e-01 -1.02703797e-01  2.99256351e-01\n",
      " -6.28769475e-01 -2.03119907e-01  2.58282510e-02  2.85796101e-01\n",
      " -2.61871361e-01  7.26654512e-02  3.81760192e-01 -4.89833220e-01\n",
      " -3.15414452e-01 -5.12365391e-01 -2.17835877e-01  4.36965348e-01\n",
      "  4.78269793e-01 -2.58983789e-01 -3.60825449e-02 -2.90276475e-01\n",
      "  1.68247319e-01  1.50274451e-01 -4.92114052e-01 -1.71109587e-01\n",
      "  5.95222386e-01  2.19927983e-02  7.09060727e-01  7.57294117e-01\n",
      "  9.86289565e-03  4.49347556e-02 -6.04850387e-01  8.78827798e-01\n",
      "  4.83546845e-01  1.16888089e-01  2.37730782e-01 -7.43210429e-02\n",
      " -1.52788671e+00  4.83454532e-01  2.86372317e-01  2.98315123e-01\n",
      "  7.03468053e-01  1.72018726e-01 -7.37456624e-01 -1.67396478e-01\n",
      "  2.37154887e-01  2.83393007e-01  2.92465709e-01 -5.56140000e-01\n",
      "  3.25931918e-01  4.98526724e-01 -2.36680563e-02 -1.23692203e-01\n",
      "  3.67912429e-01  6.41056106e-01 -1.66290827e-01 -3.13008117e-01\n",
      "  4.86140828e-01 -3.51323230e-01  8.08113554e-02  7.54404625e-01\n",
      " -4.67058021e-01  1.97175597e-01  5.40324345e-01  6.15009649e-01\n",
      " -5.54746308e-01 -5.92198502e-02 -5.89137582e-01  1.56360658e-01\n",
      " -1.12436901e+00 -1.83964476e-02 -2.02689352e-01 -5.85244927e-01\n",
      "  4.51212852e-01  3.25074930e-01 -7.28416986e-01  1.20225572e+00\n",
      " -1.08402565e-01  9.42259931e-01  2.33073079e-01 -3.07242930e-01\n",
      " -4.86158453e-01  2.92766399e-02 -3.75791621e-01 -3.37389668e-01\n",
      "  1.85800217e-01  9.25698483e-02  5.46935079e-01  3.84258192e-01\n",
      " -4.42376643e-01 -1.77511569e-01 -7.67198332e-02  1.53392868e+00\n",
      " -1.59577503e-01 -5.33264451e-01  9.85817409e-01  1.17133546e-01\n",
      " -7.45235160e-02 -5.85406213e-02 -1.83090846e-02  3.62439357e-01\n",
      " -4.02303065e-02 -5.85207067e-01  5.73838556e-02 -6.97896674e-02\n",
      "  5.50305125e-01  1.06047544e+00 -3.74787888e-01 -3.97798152e-02\n",
      " -3.69383388e-01  5.83164117e-02  7.26660556e-01  4.51110263e-01\n",
      " -8.64392196e-01 -3.42058766e-01 -6.46368495e-01  4.47849760e-01\n",
      " -5.33362229e-01 -1.02238185e+00 -1.51369375e-01  1.16738899e-02\n",
      " -1.78136808e-01 -3.61839031e-01 -6.27537912e-01  1.68887579e-01\n",
      "  1.00185195e-01  1.06061821e-01  2.72162052e-02  6.89372243e-01\n",
      " -1.49192941e-01  2.32902171e-01  3.80879746e-01 -1.54883356e-01\n",
      "  7.98018338e-02  1.53106020e-01  3.22816503e-01 -3.59226870e-03\n",
      "  7.02620238e-01  2.49984997e-01 -1.11615757e-01 -3.76020666e-02\n",
      "  9.30952984e-02 -1.77315392e-01  2.56090203e-01 -3.10588316e-01\n",
      "  1.17570820e-01 -6.91300974e-01 -4.84673243e-01  2.55603220e-01\n",
      " -6.00401576e-01  3.15782314e-01  4.92286873e-02 -5.63238372e-01\n",
      "  3.94972795e-01 -2.85083066e-02 -9.64706615e-02 -2.12482205e-01\n",
      " -2.06218543e-01 -3.78395638e-01 -2.87899323e-01  1.18904259e-01\n",
      " -3.37341105e-01 -5.83081608e-01 -2.00792068e-01  1.99686060e-01\n",
      " -6.36235594e-01  7.99985261e-02  3.58830755e-01 -2.46203951e-01\n",
      " -2.44210596e-01  7.07563450e-02 -9.91180649e-02  3.00371476e-01\n",
      " -6.35707961e-01 -4.25883290e-01 -1.62351459e-01  3.59430704e-01\n",
      " -3.77525224e-01  6.56125973e-01  6.12750186e-01  4.12282004e-01\n",
      " -6.11836910e-01  4.73770311e-01  2.81090917e-01  9.47251654e-02\n",
      " -9.78861843e-01  1.55302261e-03  1.02338908e+00 -5.40835134e-01\n",
      "  1.04709457e+00  1.28156135e-01  5.66489253e-01 -1.75454662e-01\n",
      "  7.73474107e-03  5.29807555e-01 -8.45997573e-01  1.74728420e-01\n",
      "  3.77456109e-01 -4.62021740e-02  1.54230711e-01  2.62556817e-01\n",
      "  1.48740491e+00  7.71568423e-01 -6.72188268e-01  5.28113340e-02\n",
      "  6.02600701e-01  4.34653346e-01  5.13777559e-01 -7.37552451e-01\n",
      " -1.14333316e-02 -1.68049684e-01  9.23128793e-02 -7.43284951e-01\n",
      "  4.01099343e-01 -4.22745554e-01  5.72656396e-01 -5.02418806e-01]\n",
      "evar = 0.20678342154546583\n",
      "vb = [[ 2.21026819e-04 -5.64715199e-05]\n",
      " [-5.64715199e-05  1.14889709e-04]]\n",
      "[0.54382267 0.99563508]\n",
      "\n",
      "[[ 0.01469681 -0.00224287]\n",
      " [-0.00224287  0.01048138]]\n"
     ]
    }
   ],
   "source": [
    "# 1.3. CODE ABOVE WITH COMMENTS AND PRINTING\n",
    "\n",
    "# import both the 'inv' and 'sqrtm' functions from the 'linalg' functions of the SciPy module\n",
    "from scipy.linalg import inv, sqrtm\n",
    "\n",
    "# solve for b in the equation X.T@X@b = X.T@y\n",
    "b = np.linalg.solve(X.T@X,X.T@y)\n",
    "print(\"b =\", b)\n",
    "\n",
    "# e gets R:: y - X %*% b \n",
    "e = y - X@b\n",
    "print(\"e =\", e)\n",
    "\n",
    "# An additional line simply to show what e.var() generates\n",
    "evar = e.var()\n",
    "print(\"evar =\", evar)\n",
    "\n",
    "# vb gets R:: var(e) * solve(t(X) %*% X)\n",
    "vb = e.var()*inv(X.T@X)\n",
    "print(\"vb =\", vb)\n",
    "\n",
    "# print b with an additional line after the results\n",
    "print(b,end='\\n\\n')\n",
    "\n",
    "# print the squareroot of the matrix vb\n",
    "print(sqrtm(vb))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2. [Weighted Regression in =python=](https://datahub.berkeley.edu/user/benjaminkrause/notebooks/ARE212_Materials/weighted_regression.ipynb)\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "or see [weighted_regressions on github](https://github.com/ligonteaching/ARE212_Materials/blob/master/weighted_regression.ipynb)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The fact that $T$ and $u$ are &ldquo;independent&rdquo; (or at least\n",
    "orthogonal) variables means that if we want to compute a\n",
    "&ldquo;classical&rdquo; regression we&rsquo;d do it something like this:\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Define independent random variables\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 2.1. ORIGINAL CODE\n",
    "\n",
    "%matplotlib inline\n",
    "import numpy as np\n",
    "from scipy.stats import multivariate_normal\n",
    "\n",
    "k = 3 # Number of observables in T\n",
    "\n",
    "mu = [0]*k\n",
    "Sigma=[[1,0.5,0],\n",
    "       [0.5,2,0],\n",
    "       [0,0,3]]\n",
    "\n",
    "T = multivariate_normal(mu,Sigma)\n",
    "\n",
    "u = multivariate_normal(cov=0.2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<font color='red'> *notes*: </font>\n",
    "- `len(x)` returns the length of an array; R::length(x)\n",
    "- `np.shape(x)` returns the dimensions of a matrix; R::dim(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "k = 3\n",
      "mu = [0, 0, 0]\n",
      "Length mu = 3\n",
      "Sigma = [[1, 0.5, 0], [0.5, 2, 0], [0, 0, 3]]\n",
      "Shape Sigma = (3, 3)\n",
      "T = <scipy.stats._multivariate.multivariate_normal_frozen object at 0x7f712600cda0>\n",
      "T = <scipy.stats._multivariate.multivariate_normal_frozen object at 0x7f712600cda0>\n"
     ]
    }
   ],
   "source": [
    "# 2.1. CODE ABOVE WITH COMMENTS AND PRINTING\n",
    "\n",
    "%matplotlib inline\n",
    "import numpy as np\n",
    "from scipy.stats import multivariate_normal\n",
    "\n",
    "k = 3 # Number of observables in T\n",
    "print(\"k =\", k)\n",
    "\n",
    "mu = [0]*k\n",
    "print(\"mu =\", mu)\n",
    "print(\"Length mu =\", len(mu))\n",
    "\n",
    "\n",
    "Sigma=[[1,0.5,0],\n",
    "       [0.5,2,0],\n",
    "       [0,0,3]]\n",
    "print(\"Sigma =\", Sigma)\n",
    "print(\"Shape Sigma =\", np.shape(Sigma))\n",
    "\n",
    "T = multivariate_normal(mu,Sigma)\n",
    "print(\"T =\", T)\n",
    "\n",
    "u = multivariate_normal(cov=0.2)\n",
    "print(\"T =\", T)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Define =X=\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Recall that $X$ can depend on $T$ and $u$.  This dependence needn&rsquo;t be\n",
    "linear!  For example, suppose $X=T^3D + u$, where $D$ is an\n",
    "$\\ell\\times k$ matrix.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Construct Sample\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To construct a sample of observables $(y,X,T)$ we just use the regression equation,\n",
    "      plus an assumption about the value of $\\beta$:\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 2.2. ORIGINAL CODE\n",
    "\n",
    "beta = [1/2,1]\n",
    "\n",
    "D = np.random.random(size=(3,2)) # Generate random 3x2 matrix\n",
    "\n",
    "N=1000 # Sample size\n",
    "\n",
    "# Now: Transform rvs into a sample\n",
    "T = T.rvs(N)\n",
    "\n",
    "u = u.rvs(N) # Replace u with a sample\n",
    "\n",
    "X = (T**3)@D  # Note use of ** operator for exponentiation\n",
    "\n",
    "y = X@beta + u # Note use of @ operator for matrix multiplication"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<font color='red'>NB: Once you redefine your random variables using X.rvs(N), you must rerun the earlier code to run this cell again. </font> "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<font color='red'> *notes*: </font>\n",
    "- `**` for exponents so that `3**2` = $3^2$; R::3^2 or 3**2 (i.e. the same)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "beta = [0.5, 1]\n",
      "Length beta = 2\n",
      "D = [[0.7903043  0.47693361]\n",
      " [0.16441147 0.04232794]\n",
      " [0.93806605 0.62679104]]\n",
      "Shape D = (3, 2)\n"
     ]
    },
    {
     "ename": "AttributeError",
     "evalue": "'numpy.ndarray' object has no attribute 'rvs'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-15-0c26dbe1f455>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[0;31m# Now: Transform rvs into a sample\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 14\u001b[0;31m \u001b[0mT\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mT\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrvs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mN\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     15\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"T =\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mT\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     16\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Shape T =\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mT\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mAttributeError\u001b[0m: 'numpy.ndarray' object has no attribute 'rvs'"
     ]
    }
   ],
   "source": [
    "# 2.2. CODE ABOVE WITH COMMENTS AND PRINTING\n",
    "\n",
    "beta = [1/2,1]\n",
    "print(\"beta =\", beta)\n",
    "print(\"Length beta =\", len(beta))\n",
    "\n",
    "D = np.random.random(size=(3,2)) # Generate random 3x2 matrix\n",
    "print(\"D =\", D)\n",
    "print(\"Shape D =\", np.shape(D))\n",
    "\n",
    "N=1000 # Sample size\n",
    "\n",
    "# Now: Transform rvs into a sample\n",
    "T = T.rvs(N)\n",
    "print(\"T =\", T)\n",
    "print(\"Shape T =\", np.shape(T))\n",
    "\n",
    "u = u.rvs(N) # Replace u with a sample\n",
    "print(\"u =\", u)\n",
    "print(\"Shape u =\", np.shape(u))\n",
    "print(\"Length u =\", len(u))\n",
    "\n",
    "X = (T**3)@D  # Note use of ** operator for exponentiation\n",
    "print(\"Shape X =\", np.shape(X))\n",
    "\n",
    "y = X@beta + u # Note use of @ operator for matrix multiplication\n",
    "print(\"Shape y =\", np.shape(y))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Turn to estimation\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "So, we now have data on *realizations* $(y,X,T)$.  Now forget\n",
    "     that we know $\\beta$ and let&rsquo;s estimate it, using weighted least\n",
    "     squares.  As a numerical matter it&rsquo;s better to avoid explicitly\n",
    "     inverting the $(T^T X)$ matrix; instead we can solve the &ldquo;normal&rdquo;\n",
    "     equations\n",
    "\n",
    "\\begin{align*}\n",
    "   X'y &= X' X b + X' u\\\\\n",
    "   \\mbox{E}(T'u) = 0\n",
    "\\end{align*}\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Numerical solution\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In the classical case we were trying to solve a linear system that\n",
    " took the form $Ab=0$, with $A$ a square matrix.  In the present case\n",
    " we&rsquo;re also trying to solve a linear system, but with a matrix $A$\n",
    " that may have more rows than columns.  Provided the rows are linearly\n",
    " independent, this implies that we have an **overidentified** system of\n",
    " equations.  We&rsquo;ll return to the implications of this later, but for\n",
    " now this also calls for a different numerical approach, using\n",
    " `np.linalg.lstsq` instead of `np.linalg.solve`.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.49668521 1.00142071]\n",
      "[[ 4.38645065e-06 -2.08749324e-06]\n",
      " [-2.08749324e-06  3.17039612e-06]]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/srv/app/venv/lib/python3.6/site-packages/ipykernel_launcher.py:5: FutureWarning: `rcond` parameter will change to the default of machine precision times ``max(M, N)`` where M and N are the input matrix dimensions.\n",
      "To use the future default and silence this warning we advise to pass `rcond=None`, to keep using the old, explicitly pass `rcond=-1`.\n",
      "  \"\"\"\n"
     ]
    }
   ],
   "source": [
    "# 2.3. ORIGINAL CODE\n",
    "\n",
    "from scipy.linalg import inv, sqrtm\n",
    "\n",
    "b = np.linalg.lstsq(T.T@X,T.T@y)[0] # lstsqs returns several results\n",
    "\n",
    "e = y - X@b\n",
    "\n",
    "print(b)\n",
    "\n",
    "TXplus = np.linalg.pinv(T.T@X) # Moore-Penrose pseudo-inverse\n",
    "\n",
    "# Covariance matrix of b\n",
    "vb = e.var()*TXplus@T.T@T@TXplus.T  # u is known to be homoskedastic\n",
    "\n",
    "print(vb)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "# np.linalg.lstsq?\n",
    "# Return the least-squares solution to a linear matrix equation.\n",
    "## Solves the equation `a x = b` by computing a vector `x` that\n",
    "## minimizes the Euclidean 2-norm `|| b - a x ||^2`.  The equation may\n",
    "## be under-, well-, or over- determined (i.e., the number of\n",
    "## linearly independent rows of `a` can be less than, equal to, or\n",
    "## greater than its number of linearly independent columns).  If `a`\n",
    "## is square and of full rank, then `x` (but for round-off error) is\n",
    "## the \"exact\" solution of the equation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "# np.linalg.pinv?\n",
    "# Compute the (Moore-Penrose) pseudo-inverse of a matrix.\n",
    "## Calculate the generalized inverse of a matrix using its\n",
    "## singular-value decomposition (SVD) and including all\n",
    "## *large* singular values."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "b = [0.49668521 1.00142071]\n",
      "vb = [[ 4.38645065e-06 -2.08749324e-06]\n",
      " [-2.08749324e-06  3.17039612e-06]]\n"
     ]
    }
   ],
   "source": [
    "# 2.3. CODE ABOVE WITH COMMENTS AND PRINTING\n",
    "\n",
    "# import both the 'inv' and 'sqrtm' functions from the 'linalg' functions of the SciPy module\n",
    "from scipy.linalg import inv, sqrtm\n",
    "\n",
    "# solve for b in the equation T.T@X@b = T.T@y\n",
    "b = np.linalg.lstsq(T.T@X,T.T@y, rcond=-1)[0] # lstsqs returns several results\n",
    "# note that I'm also passing it rcond=-1 to mute the error above and maintain the old parameter\n",
    "\n",
    "# e gets R:: y - X %*% b \n",
    "e = y - X@b\n",
    "print\n",
    "\n",
    "print(\"b =\", b)\n",
    "\n",
    "# calculate the Moore-Penrose pseudo-inverse\n",
    "TXplus = np.linalg.pinv(T.T@X) # Moore-Penrose pseudo-inverse\n",
    "\n",
    "# Covariance matrix of b\n",
    "## vb gets var(e) * TXplus %*% t(T) %*% T %*% t(TXplus)\n",
    "vb = e.var()*TXplus@T.T@T@TXplus.T  # u is known to be homoskedastic\n",
    "\n",
    "print(\"vb =\",vb)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3. [random_variables0](https://datahub.berkeley.edu/user/benjaminkrause/notebooks/ARE212_Materials/random_variables0.ipynb)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "or see [random_variables0 on github](https://github.com/ligonteaching/ARE212_Materials/blob/master/random_variables0.ipynb)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Defining Random Variables in =python=                       :code_example:\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<script>\n",
       "                  code_show=true; \n",
       "                  function code_toggle() {\n",
       "                     if (code_show){\n",
       "                        $('div.cell.code_cell.rendered.selected div.input').hide();\n",
       "                     } else {\n",
       "                        $('div.cell.code_cell.rendered.selected div.input').show();\n",
       "                     }\n",
       "                     code_show = !code_show\n",
       "                   } \n",
       "                  $( document ).ready(code_toggle);\n",
       "                 </script>\n",
       "<a href=\"javascript:code_toggle()\"></a>."
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Define \"tag\" the display of which hides the cell\n",
    "from IPython.display import HTML\n",
    "from IPython.display import display\n",
    "\n",
    "# Taken from https://stackoverflow.com/questions/31517194/how-to-hide-one-specific-cell-input-or-output-in-ipython-notebook\n",
    "def tag(marker):\n",
    "    s = HTML('''<script>\n",
    "                  code_show=true; \n",
    "                  function code_toggle() {\n",
    "                     if (code_show){\n",
    "                        $('div.cell.code_cell.rendered.selected div.input').hide();\n",
    "                     } else {\n",
    "                        $('div.cell.code_cell.rendered.selected div.input').show();\n",
    "                     }\n",
    "                     code_show = !code_show\n",
    "                   } \n",
    "                  $( document ).ready(code_toggle);\n",
    "                 </script>\n",
    "<a href=\"javascript:code_toggle()\">%s</a>.''' % marker)\n",
    "    return s\n",
    "display(tag(''))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The distinguishing feature of variables in a field such as the\n",
    "   reals or the complex plane is their *value*; the distinguishing\n",
    "   feature of random variables is their *distribution*.  The `python`\n",
    "   package `scipy.stats` is well-engineered and offers many different\n",
    "   distributions, and tools to construct others, while the package\n",
    "   `pacal` is perhaps less well engineered, but defines arithmetic\n",
    "   operations over random variables which allows for more elegant\n",
    "   semantics.\n",
    "\n",
    "There are two main classes of random variables to consider: discrete\n",
    "and continuous.  The distinction is worth drawing because different\n",
    "classes are handled differently in many mathematical operations.  \n",
    "\n",
    "For example, here we instantiate a scalar $\\rvx$:\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 3.2. ORIGINAL CODE\n",
    "\n",
    "from scipy.stats import distributions as iid\n",
    "\n",
    "x = iid.norm()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "# iid.norm?\n",
    "# A normal continuous random variable."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 3.2. CODE ABOVE WITH COMMENTS AND PRINTING\n",
    "\n",
    "# import just the distributions function (and call it \"iid\") from the \"stats\" functions of the SciPy module\n",
    "from scipy.stats import distributions as iid\n",
    "\n",
    "# x gets a normal continuous random variable.\n",
    "x = iid.norm()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "And here we instantiate a discrete random variable which is defined\n",
    " over an event space $\\{-1,0,1\\}$ with corresponding probabilities $(1/3,1/2,1/6)$:\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 3.3. ORIGINAL CODE\n",
    "\n",
    "Omega = (-1,0,1)\n",
    "Pr = (1/3.,1/2.,1/6.)\n",
    "\n",
    "s = iid.rv_discrete(values=(Omega,Pr))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<font color='red'> *notes*: </font>\n",
    "- `.` after numbers specifies the type as `float` (as opposed to an `integer`) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "# iid.rv_discrete?\n",
    "# `rv_discrete` is a base class to construct specific distribution classes\n",
    "## and instances for discrete random variables. It can also be used\n",
    "## to construct an arbitrary distribution defined by a list of support\n",
    "## points and corresponding probabilities."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Omega = (-1, 0, 1)\n",
      "Pr = (0.3333333333333333, 0.5, 0.16666666666666666)\n",
      "s = <scipy.stats._distn_infrastructure.rv_sample object at 0x7f712600c860>\n"
     ]
    }
   ],
   "source": [
    "# 3.3. CODE ABOVE WITH COMMENTS AND PRINTING\n",
    "\n",
    "# Omega gets R::list(-1, 0, 1)\n",
    "Omega = (-1,0,1)\n",
    "print(\"Omega =\", Omega)\n",
    "\n",
    "# Pr gets R::list(1/3,1/2,1/6)\n",
    "Pr = (1/3.,1/2.,1/6.)\n",
    "print(\"Pr =\", Pr)\n",
    "\n",
    "# generate a discrete random variable of defined over event space Omega with corresponding probabilities Pr\n",
    "s = iid.rv_discrete(values=(Omega,Pr))\n",
    "print(\"s =\", s)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, here are some things we can do with these random variables.\n",
    " First, the continuous  $\\rvx$:\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "E(x) = 0.0000\n",
      "\n",
      "Some (central) moments of x:\n",
      "[(1, 0.0), (2, 1.0), (3, 0.0), (4, 3.0)]\n",
      "\n",
      "95% confidence interval: (-1.959964,1.959964)\n",
      "\n",
      "0.5 0.3989422804014327\n"
     ]
    }
   ],
   "source": [
    "# 3.4. ORIGINAL CODE\n",
    "\n",
    "print(\"E(x) = %6.4f\" % x.mean())\n",
    "print()\n",
    "print(\"Some (central) moments of x:\")\n",
    "print([(m,x.moment(m)) for m in [1,2,3,4]])\n",
    "print()\n",
    "print(\"95%% confidence interval: (%f,%f)\" % x.interval(0.95))\n",
    "print()\n",
    "print(x.cdf(0),x.pdf(0))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<font color='red'> *notes*: </font>\n",
    "- `%` operator used to specify formats in strings, see [A Guide to the Newer Python String Format Techniques](https://realpython.com/python-formatted-output/)\n",
    "- `%6.4f` sets the formatting to round and show float numbers to 4 decimal places\n",
    "- `%f` sets formatting as a float\n",
    "- `x.moment(y)` calls the yth moment of x\n",
    "- `x.interval(y)` calls the y (as a decimal point) interval of x\n",
    "- `x.cdf(y)` Cumulative distribution function of x evaluated at y\n",
    "- `x.pdf(y)` probability density function of x evaluated at y\n",
    "- `print()` just returns blank lines, similar to including the `end` specification `print( , end = '\\n\\n')`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "E(x) = 0.0000\n",
      "\n",
      "E(x) = 0.0000\n",
      "\n",
      "Some (central) moments of x:\n",
      "[(1, 0.0), (2, 1.0), (3, 0.0), (4, 3.0)]\n",
      "\n",
      "Just the first moment =  0.0\n",
      "\n",
      "Just the fourth moment =  3.0\n",
      "\n",
      "Some (central) moments of x called as a range:\n",
      "[(1, 0.0), (2, 1.0), (3, 0.0)]\n",
      "\n",
      "95% confidence interval: (-1.959964,1.959964)\n",
      "\n",
      "0.5 0.3989422804014327\n"
     ]
    }
   ],
   "source": [
    "# 3.4. CODE ABOVE WITH COMMENTS AND PRINTING\n",
    "\n",
    "print(\"E(x) = %6.4f\" % x.mean())\n",
    "print()\n",
    "print(\"E(x) = %6.4f\" % x.mean(), end = '\\n\\n')\n",
    "print(\"Some (central) moments of x:\")\n",
    "print([(m,x.moment(m)) for m in [1,2,3,4]]) # note the equivalent of an for loop passing the range 1-4 through m in x.moment(m)\n",
    "print()\n",
    "print(\"Just the first moment = \", x.moment(1))\n",
    "print()\n",
    "print(\"Just the fourth moment = \", x.moment(4))\n",
    "print()\n",
    "print(\"Some (central) moments of x called as a range:\")\n",
    "print([(m,x.moment(m)) for m in range(1,4)])\n",
    "print()\n",
    "print(\"95%% confidence interval: (%f,%f)\" % x.interval(0.95))\n",
    "print()\n",
    "print(x.cdf(0),x.pdf(0))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next, the discrete r.v., \\rv{s}:\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "E(s) = -0.1667\n",
      "\n",
      "Some moments of x:\n",
      "[(1, -0.16666666666666666), (2, 0.5), (3, -0.16666666666666666), (4, 0.5)]\n",
      "\n",
      "95% confidence interval: (-1.000000,1.000000)\n",
      "\n",
      "0.8333333333333333 0.5\n"
     ]
    }
   ],
   "source": [
    "# 3.5. ORIGINAL CODE\n",
    "\n",
    "print(\"E(s) = %6.4f\" % s.mean())\n",
    "print()\n",
    "print(\"Some moments of x:\")\n",
    "print([(m,s.moment(m)) for m in [1,2,3,4]])\n",
    "print()\n",
    "print(\"95%% confidence interval: (%f,%f)\" % s.interval(0.95))\n",
    "print()\n",
    "# Note! Not pdf, but pmf for discrete rv.\n",
    "print(s.cdf(0),s.pmf(0))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<font color='red'> *notes*: </font>\n",
    "- `s.pmf(y)` probability mass function of s evaluated at y"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If we want *realizations* of these random variables:\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 1.02792504 -0.26372605  0.86607785]\n"
     ]
    }
   ],
   "source": [
    "# 3.6. ORIGINAL CODE\n",
    "\n",
    "N=3\n",
    "print(x.rvs(N)) # N realizations; no longer random"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We&rsquo;d like to be able to combine different random variables, say\n",
    "by addition, yielding a new random variable.  For instance, we&rsquo;d like\n",
    "to be able to construct\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "unsupported operand type(s) for +: 'rv_frozen' and 'rv_sample'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-61-c67a17ba623b>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# 3.7. ORIGINAL CODE\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mx\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0ms\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m: unsupported operand type(s) for +: 'rv_frozen' and 'rv_sample'"
     ]
    }
   ],
   "source": [
    "# 3.7. ORIGINAL CODE\n",
    "\n",
    "y = x + s"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "But this fails.  Can you explain why?  What do you suppose the cdf of\n",
    "$\\rvy$ looks like?  Does it have a density, or does the addition of a\n",
    "random variable that *lacks* a density ($\\rv{s}$) to a random variable\n",
    "that has one ($\\rvx$) mess things up?\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (<ipython-input-10-e4ceebb730d3>, line 7)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-10-e4ceebb730d3>\"\u001b[0;36m, line \u001b[0;32m7\u001b[0m\n\u001b[0;31m    class ConvolvedContinuousAndDiscrete(iid.rv_continuous):\u001b[0m\n\u001b[0m        ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "# 3.8. ORIGINAL CODE\n",
    "\n",
    "display(tag(\"+\")\n",
    "# Code to convolve a random variable with a pmf and another having a cdf\n",
    "# Exploits =scipy.stats= base rv_continuous class.\n",
    "\n",
    "class ConvolvedContinuousAndDiscrete(iid.rv_continuous):\n",
    "\n",
    "    \"\"\"Convolve (add) a continuous rv x and a discrete rv s,\n",
    "       returning the resulting cdf.\"\"\"\n",
    "\n",
    "    def __init__(self,f,s):\n",
    "        self.continuous_rv = f\n",
    "        self.discrete_rv = s\n",
    "        super(ConvolvedContinuousAndDiscrete, self).__init__(name=\"ConvolvedContinuousAndDiscrete\")\n",
    "        \n",
    "    def _cdf(self,z):\n",
    "        F=0\n",
    "        s = self.discrete_rv\n",
    "        x = self.continuous_rv\n",
    "        \n",
    "        for k in range(len(s.xk)):\n",
    "            F = F + x.cdf(z-s.xk[k])*s.pk[k]\n",
    "        return F\n",
    "\n",
    "    def _pdf(self,z):\n",
    "        f=0\n",
    "        s = self.discrete_rv\n",
    "        x = self.continuous_rv\n",
    "        \n",
    "        for k in range(len(s.xk)):\n",
    "            f = f + x.pdf(z-s.xk[k])*s.pk[k]\n",
    "        return f\n",
    "\n",
    "\n",
    "# Create new convolved rv:\n",
    "y = ConvolvedContinuousAndDiscrete(x,s)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'y' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-21-18c85864e78e>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mX\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlinspace\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m4\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m4\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m100\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtolist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m \u001b[0mfig\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgo\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mFigure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mgo\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mScatter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpdf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mz\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mz\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      7\u001b[0m \u001b[0mfig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m<ipython-input-21-18c85864e78e>\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mX\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlinspace\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m4\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m4\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m100\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtolist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m \u001b[0mfig\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgo\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mFigure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mgo\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mScatter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpdf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mz\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mz\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      7\u001b[0m \u001b[0mfig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'y' is not defined"
     ]
    }
   ],
   "source": [
    "# 3.9. ORIGINAL CODE\n",
    "\n",
    "import plotly.graph_objects as go\n",
    "import numpy as np\n",
    "\n",
    "X = np.linspace(-4,4,100).tolist()\n",
    "\n",
    "fig = go.Figure(data=go.Scatter(x=X, y=[y.pdf(z) for z in X]))\n",
    "fig.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Exercise\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Prove that $\\rvy$ is continuous (in the sense that it has a density),\n",
    "     as suggested by the figure *or* establish that the figure is\n",
    "     wrong or misleading.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Proof\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let $F_x$ denote the cdf of \\rvx.  We want to establish that the cdf\n",
    "of $\\rvy$, say $F_y(y)=\\Pr(\\rvy\\leq y)$ is a continuously differentiable\n",
    "function of $y$.  We use the fact that the distribution of $\\rvy$ is a\n",
    "convolution of $\\rvx$ and $\\rvs$, so that\n",
    "\n",
    "\\begin{equation} \n",
    "\\begin{split}\n",
    "    \\Pr(\\rvy\\leq y) &= \\Pr(\\rv{s} + \\rv{x}\\leq y ) \\\\\n",
    "                    &= \\sum_{s\\in\\Omega}\\Pr(\\rvx\\leq y-s|s)\\pi_s\\\\\n",
    "                    &= \\sum_{s\\in\\Omega}F_x(y-s)\\pi_s,\n",
    "\\end{split}\n",
    "\\end{equation}\n",
    "\n",
    "which is continuously differentiable in $y$, as required.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Final Word"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.9"
  },
  "org": null
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
